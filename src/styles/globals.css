@import './tokens.css';
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Typed CSS custom properties for smooth color transitions */
@property --bg-color {
  syntax: '<color>';
  inherits: true;
  initial-value: rgb(17 17 17);
}
@property --fg-color {
  syntax: '<color>';
  inherits: true;
  initial-value: rgb(243 244 246);
}
@property --border-color {
  syntax: '<color>';
  inherits: true;
  initial-value: rgb(55 65 81);
}

html, body {
  height: 100%;
  background-color: var(--bg-color);
  color: var(--fg-color);
  transition: background-color 1000ms ease, color 1000ms ease;
}

/* Simple scroll-reveal animation */
.reveal {
  opacity: 0;
  transform: translateY(12px);
  will-change: opacity, transform;
  transition: opacity 1200ms cubic-bezier(0.16, 1, 0.3, 1), transform 1200ms cubic-bezier(0.16, 1, 0.3, 1);
}
.reveal-visible {
  opacity: 1;
  transform: translateY(0);
}
/* Slower variant for select sections */
.reveal-slow {
  transition: opacity 2000ms cubic-bezier(0.16, 1, 0.3, 1), transform 2000ms cubic-bezier(0.16, 1, 0.3, 1);
}

/* Terminal caret */
@keyframes caretBlink {
  0%, 49% { opacity: 1; }
  50%, 100% { opacity: 0; }
}
.caret {
  display: inline-block;
  width: 0.65ch;
  height: 1em;
  background-color: currentColor;
  vertical-align: text-bottom;
}
.caret-blink {
  animation: caretBlink 1s step-end infinite;
}

/* Theme-aware color transitions on common utility classes */
.bg-bg { transition: background-color 1000ms ease; }
.text-fg { transition: color 1000ms ease; }
.border-border { transition: border-color 1000ms ease; }

@media (prefers-reduced-motion: reduce) {
  html, body,
  .bg-bg, .text-fg, .border-border {
    transition: none !important;
  }
}

/* Terminal fades */
.terminal-transition {
  transition: opacity 300ms ease;
}
.terminal-fade-in {
  opacity: 1;
}
.terminal-fade-out {
  opacity: 0.12;
}

/* Hero title intro animation */
.hero-intro {
  will-change: transform;
  animation: heroIntro var(--hero-intro-duration, 2000ms) cubic-bezier(0.16, 1, 0.3, 1) both;
}
@keyframes heroIntro {
  0% {
    transform: translateY(var(--hero-initial-shift, 80px)) scale(var(--hero-initial-scale, 2));
  }
  100% {
    transform: translateY(0) scale(1);
  }
}
.hero-scroll {
  will-change: transform;
}

/* Theme transition overlay to pass through gray subtly */
html.theme-transitioning::before {
  content: '';
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 9999;
  animation: themeOverlay 1000ms ease;
}
@keyframes themeOverlay {
  0% { background: rgba(128, 128, 128, 0); }
  50% { background: rgba(128, 128, 128, 0.07); }
  100% { background: rgba(128, 128, 128, 0); }
}

/* Crossfade previous background color on theme change */
html.theme-crossfade::before {
  content: '';
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 9999;
  background: var(--prev-bg, transparent);
  opacity: var(--crossfade-opacity, 0);
  transition: opacity 1000ms ease;
}

/* Darker terminal frame */
.terminal-frame { border-color: rgb(var(--fg) / 0.22) !important; }
/* Terminal divider lines matching frame */
.terminal-divider {
  border-color: rgb(var(--fg) / 0.22) !important;
  transition: border-color 1000ms ease;
}
/* Global UI divider line */
.ui-divider {
  border-color: rgb(var(--fg) / 0.22) !important;
  transition: border-color 1000ms ease;
}
